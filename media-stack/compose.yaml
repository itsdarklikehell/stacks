services:
  mylar3:
    image: lscr.io/linuxserver/mylar3:latest
    container_name: mylar3
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ./mylar3/mylar3/config:/config
      - ./mylar3/comics:/comics
      - ./mylar3/downloads:/downloads
    ports:
      - 8091:8091
    restart: unless-stopped
    labels:
      autoheal: true

  plex:
    image: plexinc/pms-docker
    container_name: plex
    ports:
      - "32400:32400"
    volumes:
      - ./plex/config:/config
      - ./plex/transcode:/transcode
      - ./plex/media:/data
    labels:
      autoheal: true

  requestrr:
    image: thomst08/requestrr
    container_name: requestrr
    ports:
      - "4545:4545"
    volumes:
      - ./requestrr/config:/root/config
    restart: unless-stopped
    labels:
      autoheal: true

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=Europe/Amsterdam
      - PORT=5056 #optional
    ports:
      - 5056:5056
    volumes:
      - ./overseerr/appdata/config:/app/config
    restart: unless-stopped
    labels:
      autoheal: true

  organizr:
    image: linuxserver/organizr
    container_name: organizr
    ports:
      - "8086:80"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ./organizr/config:/config
    labels:
      autoheal: true

  mattermost:
    image: mattermost/mattermost-team-edition
    container_name: mattermost
    ports:
      - "8065:8065"
    labels:
      autoheal: true

  calibre-web:
    image: linuxserver/calibre-web
    container_name: calibre-web
    ports:
      - "8084:8084"
    volumes:
      - ./calibre-web/calibre-library:/calibre-library
    labels:
      autoheal: true

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=Europe/Amsterdam
    ports:
      - 5055:5055
    volumes:
      - ./jellyseerr/appdata/config:/app/config
    restart: unless-stopped
    labels:
      autoheal: rue

  # # image used to scan for music
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: arr-suite-lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/lidarr:/config # location of database and configs
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/media # location of media library + qbittorrent download folder
    expose:
      - 8686/tcp # web ui
    ports:
      - 8686:8686/tcp # web ui
    restart: unless-stopped
    #networks:
    #  - proxy
    labels:
      autoheal: true
    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.lidarr.rule=Host(`lidarr.example.com`)
    #  - traefik.http.services.lidarr.loadbalancer.server.port=8686
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.lidarr.middlewares=local-ipwhitelist@file

  # # image used to scan for movies
  radarr:
    image: linuxserver/radarr:latest
    container_name: arr-suite-radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/radarr:/config # location of database and configs
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/media # location of media library + qbittorrent download folder
    expose:
      - 7878/tcp # web ui
    ports:
      - 7878:7878/tcp # web ui
    restart: unless-stopped
    #networks:
    #  - proxy
    labels:
      autoheal: true
  #  - traefik.enable=true
  #  - traefik.docker.network=proxy
  #  - traefik.http.routers.radarr.rule=Host(`radarr.example.com`)
  #  - traefik.http.services.radarr.loadbalancer.server.port=7878
  #  # Optional part for traefik middlewares
  #  - traefik.http.routers.radarr.middlewares=local-ipwhitelist@file

  # # image used to scan for tv shows
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: arr-suite-sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/sonarr:/config # location of database and configs
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/media # location of media library + qbittorrent download folder
    expose:
      - 8989/tcp # web ui
    ports:
      - 8989:8989/tcp # web ui
    restart: unless-stopped
    #networks:
    #  - proxy
    labels:
      autoheal: true
    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.sonarr.rule=Host(`sonarr.example.com`)
    #  - traefik.http.services.sonarr.loadbalancer.server.port=8989
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.sonarr.middlewares=local-ipwhitelist@file

  #   # image used to scan for books
  # readarr:
  #   image: linuxserver/readarr:develop
  #   container_name: arr-suite-readarr
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/Amsterdam
  #   volumes:
  #     - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/readarr:/config # location of database and configs
  #     - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/media # location of media library + qbittorrent download folder
  #   expose:
  #     - 8787/tcp # web ui
  #   ports:
  #     - 8787:8787/tcp # web ui
  #   restart: unless-stopped
  #   #networks:
  #   #  - proxy
  #   #  labels:
  #   #  autoheal: true
  #   #  - traefik.enable=true
  #   #  - traefik.docker.network=proxy
  #   #  - traefik.http.routers.readarr.rule=Host(`readarr.example.com`)
  #   #  - traefik.http.services.readarr.loadbalancer.server.port=8787
  #   #  # Optional part for traefik middlewares
  #   #  - traefik.http.routers.readarr.middlewares=local-ipwhitelist@file

  # # image used to manage subtitles
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: arr-suite-bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/bazarr:/config # location of database and configs
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/media # location of media library (optional)
    expose:
      - 6767/tcp # web ui
    ports:
      - 6767:6767/tcp # web ui
    restart: unless-stopped
    #networks:
    #  - proxy
    labels:
      autoheal: true

    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.bazarr.rule=Host(`bazarr.example.com`)
    #  - traefik.http.services.bazarr.loadbalancer.server.port=6767
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.bazarr.middlewares=local-ipwhitelist@file

  # # image used to bypass cloudflare for prowlarr
  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: arr-suite-flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=Europe/Amsterdam
    expose:
      - 8191/tcp # listening port for selenium
    restart: unless-stopped
    #networks:
    #  - proxy
    labels:
      autoheal: true

  # # image used for vpn killswitch network
  # gluetun:
  #   image: qmcgaw/gluetun:latest
  #   container_name: arr-suite-gluetun
  #   cap_add:
  #     - NET_ADMIN
  #   ports:
  #     - 8080:8080 # qbittorrent http web ui
  #   environment:
  #     # see https://github.com/qdm12/gluetun-wiki for more details
  #     # example envs based on https://github.com/qdm12/gluetun-wiki/blob/main/setup/providers/mullvad.md
  #     - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-mullvad} # define the vpn provider
  #     - VPN_TYPE=${VPN_TYPE:-wireguard} # define the vpn protocol to use
  #     # - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY:?WIREGUARD_PRIVATE_KEY must be set} # define your wireguard private key here
  #     # - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES:?WIREGUARD_ADDRESSES must be set} # define the ipv4 vpn network subnet here
  #     - SERVER_CITIES=${SERVER_CITIES:?SERVER_CITIES must be set} # define the server cities
  #   volumes:
  #     - ./gluetun/configs/gluetun:/gluetun
  #   restart: unless-stopped
  #   #networks:
  #   #  - proxy
  #   #    labels:
  #   #      autoheal: true

  #   #  - traefik.enable=true
  #   #  - traefik.docker.network=proxy
  #   #  - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.example.com`)
  #   #  - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
  #   #  # Optional part for traefik middlewares
  #   #  - traefik.http.routers.qbittorrent.middlewares=local-ipwhitelist@file

  # # image used to download stuff; run over gluetun network (vpn killswitch)
  # # qbittorrent:
  # #   image: linuxserver/qbittorrent:5.0.2-libtorrentv1
  # #   container_name: arr-suite-qbittorrent
  # #   environment:
  # #     - PUID=1000
  # #     - PGID=1000
  # #     - TZ=Europe/Amsterdam
  # #     - WEBUI_PORT=8080
  # #   volumes:
  # #     - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/qbittorrent:/config # location of database and configs
  # #     - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media/downloads:/media/downloads # location of qbittorrent downloads
  # #   depends_on:
  # #     - gluetun
  # #   network_mode: container:arr-suite-gluetun # use the gluetun container network (vpn killswitch)
  # #   restart: unless-stopped

  # image used to manage media and stream it
  emby:
    image: linuxserver/emby:latest
    container_name: arr-suite-emby
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/emby:/config # location of database and configs; can grow very large
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/data # location of media library
      #- ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/emby/lib:/opt/vc/lib # location for Raspberry Pi OpenMAX libs (optional)
    expose:
      - 8097/tcp # http web ui
      - 8920/tcp # https web ui
    ports:
      - 8097:8097/tcp # http web ui
    #devices:
    #  - /dev/dri:/dev/dri #optional
    #  - /dev/vchiq:/dev/vchiq #optional
    #  - /dev/video10:/dev/video10 #optional
    #  - /dev/video11:/dev/video11 #optional
    #  - /dev/video12:/dev/video12 #optional
    restart: unless-stopped
    #networks:
    #  - proxy
    #labels:
    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.emby.rule=Host(`emby.example.com`)
    #  - traefik.http.services.emby.loadbalancer.server.port=8097
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.emby.middlewares=local-ipwhitelist@file
    labels:
      autoheal: true

  # image used to manage media and stream it
  jellyfin:
    image: linuxserver/jellyfin:latest
    container_name: arr-suite-jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    # volumes:
    #   - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/jellyfin:/config # location of database and configs; can grow very large
    #   - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/media:/data # location of media library
    #   #- ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/jellyfin/lib:/opt/vc/lib # location for Raspberry Pi OpenMAX libs (optional)
    expose:
      - 8096/tcp # http web ui
    ports:
      - 8096:8096/tcp # http web ui
    #devices:
    #  - /dev/dri:/dev/dri #optional
    #  - /dev/vchiq:/dev/vchiq #optional
    #  - /dev/video10:/dev/video10 #optional
    #  - /dev/video11:/dev/video11 #optional
    #  - /dev/video12:/dev/video12 #optional
    restart: unless-stopped
    #networks:
    #  - proxy
    #labels:
    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.jellyfin.rule=Host(`jellyfin.example.com`)
    #  - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.jellyfin.middlewares=local-ipwhitelist@file
    labels:
      autoheal: true

  whisparr:
    container_name: whisparr
    image: ghcr.io/hotio/whisparr
    restart: unless-stopped
    ports:
      - "6969:6969"
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Amstedam
    volumes:
      - ./whisparr/config:/config
      - ./whisparr/data:/data
    labels:
      autoheal: true

  # image used to index torrent links from the internet
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: arr-suite-prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - ${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/arr-suite/configs/prowlarr:/config # location of database and configs
    expose:
      - 9696/tcp # web ui
    ports:
      - 9696:9696/tcp # web ui
    restart: unless-stopped
    #networks:
    #  - proxy
    #labels:
    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.prowlarr.rule=Host(`prowlarr.example.com`)
    #  - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.prowlarr.middlewares=local-ipwhitelist@file
    labels:
      autoheal: true

  rreading-glasses:
    depends_on:
      rreading-glasses-db:
        condition: service_started
    image: blampe/rreading-glasses:hardcover
    pull_policy: always
    container_name: rreading-glasses
    hostname: rreading-glasses
    entrypoint: ["/main", "serve"]
    command:
      - --verbose
    restart: unless-stopped
    mem_limit: 128m
    environment:
      HARDCOVER_AUTH: # Only used for Hardcover. Starts with Bearer
      POSTGRES_HOST: rreading-glasses-db
      POSTGRES_DATABASE: rreading-glasses
      POSTGRES_USER: rreading-glasses
      POSTGRES_PASSWORD: # Generate a random string without special symbols
    ports:
      - "8788:8788"
    labels:
      autoheal: true

  rreading-glasses-db:
    image: postgres:17
    container_name: rreading-glasses-db
    hostname: rreading-glasses-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: rreading-glasses
      POSTGRES_PASSWORD: # Generated password from above
      POSTGRES_DB: rreading-glasses
    ports:
      - "5433:5433"
    volumes:
      - rreading_glasses_data:/var/lib/postgresql/data
    labels:
      autoheal: true

  romm:
    image: rommapp/romm:latest
    container_name: romm
    restart: unless-stopped
    environment:
      - DB_HOST=romm-db
      - DB_NAME=romm # Should match MARIADB_DATABASE in mariadb
      - DB_USER=romm-user # Should match MARIADB_USER in mariadb
      - DB_PASSWD= # Should match MARIADB_PASSWORD in mariadb
      - ROMM_AUTH_SECRET_KEY= # Generate a key with `openssl rand -hex 32`
      - SCREENSCRAPER_USER= # These are the recommended metadata providers
      - SCREENSCRAPER_PASSWORD= # https://docs.romm.app/latest/Getting-Started/Metadata-Providers/#screenscraper
      - RETROACHIEVEMENTS_API_KEY= # https://docs.romm.app/latest/Getting-Started/Metadata-Providers/#retroachievements
      - STEAMGRIDDB_API_KEY= # https://docs.romm.app/latest/Getting-Started/Metadata-Providers/#steamgriddb
      - HASHEOUS_API_ENABLED=true # https://docs.romm.app/latest/Getting-Started/Metadata-Providers/#hasheous
    volumes:
      - romm_resources:/romm/resources # Resources fetched from IGDB (covers, screenshots, etc.)
      - romm_redis_data:/redis-data # Cached data for background tasks
      - ./romm/library:/romm/library # Your game library. Check https://github.com/rommapp/romm?tab=readme-ov-file#folder-structure for more details.
      - ./romm/assets:/romm/assets # Uploaded saves, states, etc.
      - ./romm/config:/romm/config # Path where config.yml is stored
    ports:
      - 80:8080
    depends_on:
      romm-db:
        condition: service_healthy
        restart: true
    labels:
      autoheal: true

  romm-db:
    image: mariadb:latest
    container_name: romm-db
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD= # Use a unique, secure password
      - MARIADB_DATABASE=romm
      - MARIADB_USER=romm-user
      - MARIADB_PASSWORD=
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [CMD, healthcheck.sh, --connect, --innodb_initialized]
      start_period: 30s
      start_interval: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      autoheal: true

  retroarchz:
    image: "blaize/retroarch"
    ports:
      - "85:85"
    volumes:
      - "/home/rizzo/RetroPie/roms:/roms"

  retroarch:
    image: lscr.io/linuxserver/retroarch:latest
    container_name: retroarch
    security_opt:
      - seccomp:unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amstedam
    volumes:
      - ./retroarch/config:/config
    ports:
      - 3000:3000
      - 3001:3001
    shm_size: "1gb"
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [compute, video, graphics, utility]
    labels:
      autoheal: true

  webrcade:
    image: "webrcade/webrcade:latest"
    container_name: webrcade
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./webrcade/content:/var/www/html/content"
    restart: unless-stopped
    labels:
      autoheal: true

  gaseous-server:
    container_name: gaseous-server
    image: gaseousgames/gaseousserver:latest
    restart: unless-stopped
    networks:
      - gaseous
    depends_on:
      - gsdb
    ports:
      - 5198:80
    volumes:
      - gs:/root/.gaseous-server
    environment:
      - TZ=Europe/Amsterdam
      - dbhost=gsdb
      - dbuser=root
      - dbpass=gaseous
      - igdbclientid=
      - igdbclientsecret=
    labels:
      autoheal: true

  gsdb:
    container_name: gsdb
    image: mariadb
    restart: unless-stopped
    networks:
      - gaseous
    volumes:
      - gsdb:/var/lib/mysql
    environment:
      - MARIADB_ROOT_PASSWORD=gaseous
      - MARIADB_USER=gaseous
      - MARIADB_PASSWORD=gaseous
    labels:
      autoheal: true

  tvs99:
    image: "zshall/television-simulator:latest"
    container_name: tvs99
    hostname: tvs99
    restart: unless-stopped
    networks:
      - ai-stack
    ports:
      - ${TVS99_PORT:-8085}:3000
    volumes:
      - ./tvs99/config/config.tvs.yml:/home/static/config.tvs.yml:ro
      - ./tvs99/content:/home/static/content:ro
    labels:
      autoheal: true

  watchtower:
    image: "containrrr/watchtower:latest"
    restart: unless-stopped
    container_name: watchtower-media-stack
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # command: --debug --http-api-update
    # environment:
    #   - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}
    labels:
      - autoheal=true
      - "com.centurylinklabs.watchtower.enable=false"
    depends_on:
      - mylar3
      - plex
      - requestrr
      - overseerr
      - organizr
      - mattermost
      - calibre-web
      - jellyfin
      - jellyseerr
      - lidarr
      - radarr
      - sonarr
      - bazarr
      - flaresolverr
      - emby
      - whisparr
      - prowlarr
      - rreading-glasses
      - rreading-glasses-db
      - romm
      - romm-db
      - retroarch
      - webrcade
      - gaseous-server
      - gsdb
      - tvs99

  autoheal:
    container_name: autoheal-media
    deploy:
      replicas: 1
    environment:
      AUTOHEAL_CONTAINER_LABEL: autoheal
    image: willfarrell/autoheal:latest
    network_mode: none
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  rreading_glasses_data:
  mysql_data:
  romm_resources:
  romm_redis_data:
  gs:
  gsdb:

networks:
  ai-stack:
    external: true
  iot_macvlan:
    external: true
  basic-memory-net:
  management-stack:
    external: true
  gaseous:
    driver: bridge
  proxy:
    external: true
  cloud:
    name: cloud
    driver: bridge
    external: true
  zabbix-network:
    external: true
  kuma_network:
    driver: bridge
    external: true
  wg:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 10.42.42.0/24
        - subnet: fdcc:ad94:bacf:61a3::/64
