ARG UBUNTU_VERSION=24.04
ARG CUDA_VERSION=13.0.1
# FROM nvidia/cuda:${CUDA_VERSION}-base-ubuntu${UBUNTU_VERSION}"

FROM nvidia/cuda:${CUDA_VERSION}-cudnn-devel-ubuntu${UBUNTU_VERSION}


# An ARG declared before a FROM is outside of a build stage,
# so it canâ€™t be used in any instruction after a FROM
# ARG USER=reasearch_monster
# ARG PASSWORD=${USER}123$
# ARG PYTHON_VERSION=3.8
# To use the default value of an ARG declared before the first FROM,
# use an ARG instruction without a value inside of a build stage:
# ARG CUDA_VERSION

# Set non-interactive mode for apt and install basic dependencies
ENV DEBIAN_FRONTEND=noninteractive
# Update and install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
software-properties-common build-essential wget curl git ffmpeg ca-certificates libsndfile1

RUN add-apt-repository ppa:deadsnakes/ppa
RUN apt-get update
RUN apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3.11-venv

RUN apt-get install --fix-broken -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install pip
RUN curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
RUN python3.11 get-pip.py
RUN rm get-pip.py

# Install uv (Universal Virtualenv) - https://astral.sh/uv/
# RUN curl -sSL https://astral.sh/uv/install.sh -o install.sh
# RUN bash install.sh
# RUN rm install.sh

# Install PyTorch, Torchvision, Torchaudio with CUDA 12.8 support, and Transformers
# ENV TORCH_VERSION=2.7.0
# ENV CUDA_VERSION=12.8
# RUN python3.11 -m pip install torch==${TORCH_VERSION}+cu128 torchvision==0.18.0+cu128 torchaudio==2.7.0+cu128 \
# -f https://download.pytorch.org/whl/torch_stable.html && \
# python3.11 -m pip install transformers==4.34.0

RUN python3.11 -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128
# RUN python3.11 -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu130

# (Optional) Install additional LLM support libraries
# RUN python3.11 -m pip install accelerate bitsandbytes datasets

# Set Python3.11 as the default python
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

# Copy data
RUN mkdir /riko-project
COPY . /riko-project
WORKDIR /riko-project

# Install requirements
# RUN pip install --upgrade --root-user-action=ignore --no-cache-dir --break-system-packages pip
RUN pip install --upgrade --root-user-action=ignore --no-cache-dir --break-system-packages uv
RUN pip install --upgrade --root-user-action=ignore --no-cache-dir --break-system-packages nltk

# Create .venv
# RUN python3 -m venv .venv
RUN uv venv .venv --seed

# ENV PATH=".venv/bin:$PATH"
# RUN uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128
# RUN uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu130
RUN uv pip install -r extra-req.txt --no-deps && \
    uv pip install -r requirements.txt

RUN uv pip install faster-whisper

# RUN install_reqs.sh

# Set working directory
WORKDIR /riko-project/server

# RUN python3 main_chat.py

# # Expose port 7272 (the new default port)
# EXPOSE 7272

# The code to run when container is started:
# ENTRYPOINT ["python3", "main_chat.py"]
CMD ["python3.11", "main_chat.py"]
