# Base image
FROM nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04 AS base

# Set noninteractive mode for apt
ENV DEBIAN_FRONTEND=noninteractive

# Update and install dependencies
RUN apt-get update && \
    apt-get install -y libxcb-xfixes0 libxcb-shape0 pipx git wget curl ca-certificates python3 python3-venv ffmpeg git bzip2 && \
    apt --fix-broken install -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy requirements and install common dependencies
COPY . /openllm-vtuber
WORKDIR /openllm-vtuber


RUN curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
RUN curl -sSL https://astral.sh/uv/install.sh -o install-uv.sh
# RUN python3 get-pip.py
# RUN bash install-uv.sh
RUN pip install --root-user-action=ignore --no-cache-dir --break-system-packages -r /tmp/requirements.txt
RUN pip install --root-user-action=ignore --no-cache-dir --break-system-packages funasr modelscope huggingface_hub pywhispercpp torch torchaudio edge-tts azure-cognitiveservices-speech py3-tts
# RUN uv pip install --root-user-action=ignore --no-cache-dir --break-system-packages -r /tmp/requirements.txt
# RUN uv pip install --root-user-action=ignore --no-cache-dir --break-system-packages funasr modelscope huggingface_hub pywhispercpp torch torchaudio edge-tts azure-cognitiveservices-speech py3-tts

# MeloTTS installation
WORKDIR /opt/MeloTTS
RUN git clone https://github.com/myshell-ai/MeloTTS.git /opt/MeloTTS
RUN pip install --root-user-action=ignore --no-cache-dir --break-system-packages -r requirements.txt
RUN pip install --root-user-action=ignore --no-cache-dir --break-system-packages -e .
RUN uv pip install --root-user-action=ignore --no-cache-dir --break-system-packages -e .
RUN python3 -m unidic download
RUN python3 melo/init_downloads.py

# Whisper variant
FROM base AS whisper
ARG INSTALL_ORIGINAL_WHISPER=false
RUN if [ "$INSTALL_WHISPER" = "true" ]; then \
        pip install --root-user-action=ignore --no-cache-dir --break-system-packages openai-whisper; \
        # uv pip install --root-user-action=ignore --no-cache-dir --break-system-packages openai-whisper; \
    fi

# Bark variant
FROM whisper AS bark
ARG INSTALL_BARK=false
RUN if [ "$INSTALL_BARK" = "true" ]; then \
        pip install --root-user-action=ignore --no-cache-dir --break-system-packages git+https://github.com/suno-ai/bark.git; \
        # uv pip install --root-user-action=ignore --no-cache-dir --break-system-packages git+https://github.com/suno-ai/bark.git; \
    fi

# Final image
FROM bark AS final

# Set working directory
WORKDIR /openllm-vtuber

# RUN python3 run_server.py --help

# Expose port 12393 (the new default port)
EXPOSE 12393

CMD ["python3", "run_server.py"]
