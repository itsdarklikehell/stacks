services:
  clickhouse:
    image: ${IMAGE:-clickhouse/clickhouse-server:latest}
    container_name: ${NAME:-clickhouse}
    restart: ${RESTART:-unless-stopped}

    labels:
      - com.centurylinklabs.watchtower.enable=true
      # - autoheal-app
      # - autoheal-app=true

    user: ${PUID:-1000}:${PGID:-1000}

    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/Amsterdam}
      - ALLOW_EMPTY_PASSWORD=${ALLOW_EMPTY_PASSWORD:-yes}
      - CLICKHOUSE_TCP_PORT=${CLICKHOUSE_TCP_PORT:-9000}
      - CLICKHOUSE_HTTP_PORT=${PORT:-8124}
      - STORAGE_DIR=${STORAGE_DIR:-/app/server/storage}
      # - CLICKHOUSE_RUN_AS_ROOT=${CLICKHOUSE_RUN_AS_ROOT:-1}
      # - CLICKHOUSE_DB=${CLICKHOUSE_DB:-clickhouse}
      # - CLICKHOUSE_USER=${CLICKHOUSE_USER:-clickhouse}
      # - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT:-1}
      # - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-clickhouse}
      # - CLICKHOUSE_SKIP_USER_SETUP=${CLICKHOUSE_SKIP_USER_SETUP:-1}

    cap_add:
      - SYS_NICE
      - NET_ADMIN
      - IPC_LOCK

    ports:
      - ${PORT:-8124}:8124
      - 9000:9000
      - 9363:9363

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server/
      - ../../DATA/ai-stack/clickhouse/config_files/clickhouse/etc/clickhouse-server:/etc/clickhouse-server
      # - clickhouse_data:/bitnami/clickhouse
      # - clickhouse_configs:/etc/clickhouse-server/config.d
      # - clickhouse_users:/etc/clickhouse-server/users.d
      # - clickhouse_backups:/var/lib/clickhouse/backups
      # - clickhouse_backups:/backups
      # - clickhouse_initdb:/docker-entrypoint-initdb.d
      # - ../../DATA/ai-stack/clickhouse/config/backup_disk.xml:/etc/clickhouse-server/config.d/backup_disk.xml
      # - ../../DATA/ai-stack/chroma/config/chroma_users.xml:/etc/clickhouse-server/users.d/chroma.xml

    networks:
      host:
      ai-services:

    env_file:
      - ./clickhouse/.env

    runtime: nvidia
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1 # alternatively, use `count: all` for all GPUs
              capabilities: [gpu, compute, video, graphics, utility]

    tty: true

    stdin_open: true

    ulimits:
      nofile:
        soft: 262144
        hard: 262144

    # healthcheck:
    # test:
    #   [
    #     CMD,
    #     wget,
    #     --no-verbose,
    #     --tries=3,
    #     --spider,
    #     http://localhost:${PORT:-8124}/api/health,
    #   ]
    #   interval: 30s
    #   timeout: 10s
    #   start_period: 30s
    #   retries: 3

    depends_on:
      - minio
      - minio-bucket-creator

    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: ${RESTART:-unless-stopped}

    ports:
      - 9090:9090

    volumes:
      - ../../DATA/ai-stack/clickhouse/config_files/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus

    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles

    depends_on:
      - minio-prometheus-monitoring-cluster
      - minio-prometheus-monitoring-node
      - minio-prometheus-monitoring-bucket

  grafana:
    container_name: grafana
    image: grafana/grafana:10.0.3-ubuntu
    restart: ${RESTART:-unless-stopped}

    ports:
      - 3000:3000

    volumes:
      - grafana_data:/var/lib/grafana
      - ../../DATA/ai-stack/clickhouse/config_files/grafana/etc/grafana/provisioning/dashboards/:/etc/grafana/provisioning/dashboards/
      - ../../DATA/ai-stack/clickhouse/config_files/grafana/etc/grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
      - ../../DATA/ai-stack/clickhouse/config_files/grafana/var/lib/grafana/dashboards/:/var/lib/grafana/dashboards/
      # uncomment the following line, if you don't have access to grafana.com plugins and download a plugin manually (read README.md file)
      - ../../DATA/ai-stack/clickhouse/config_files/grafana/var/lib/grafana/plugins/:/var/lib/grafana/plugins/

    depends_on:
      - prometheus

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-09-07T02-05-02Z
    restart: ${RESTART:-unless-stopped}

    env_file:
      - ../../DATA/ai-stack/clickhouse/.env

    ports:
      - 9001:9001
      - 9002:9002

    volumes:
      - minio_data:/var/lib/minio/data

    command: minio server /var/lib/minio/data --address 0.0.0.0:9002 --console-address ":9001"

  minio-bucket-creator:
    container_name: minio-bucket-creator
    image: minio/mc:RELEASE.2023-09-13T23-08-58Z
    restart: ${RESTART:-unless-stopped}

    env_file:
      - ../../DATA/ai-stack/clickhouse/.env

    entrypoint: >
      /bin/bash -c "
      /usr/bin/mc alias set myminio http://minio:9002 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb myminio/${MINIO_CLICKHOUSE_BACKUP_BUCKET:-clickhouse};
      /usr/bin/mc anonymous set public myminio/${MINIO_CLICKHOUSE_BACKUP_BUCKET:-clickhouse};
      exit 0;
      "

    depends_on:
      - minio

  minio-prometheus-monitoring-cluster:
    container_name: minio-prometheus-monitoring-cluster
    image: minio/mc:RELEASE.2023-09-13T23-08-58Z
    restart: ${RESTART:-unless-stopped}

    env_file:
      - ../../DATA/ai-stack/clickhouse/.env

    volumes:
      - ../../DATA/ai-stack/clickhouse/config_files/prometheus/templates/prometheus.yaml:/home/prometheus-template.yaml:ro
      - ../../DATA/ai-stack/clickhouse/config_files/prometheus/prometheus.yaml:/home/prometheus.yaml

    entrypoint: >
      /bin/bash -c "
      cp /home/prometheus-template.yaml /home/prometheus.yaml;
      /usr/bin/mc alias set myminio http://minio:9002 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD > /dev/null;
      /usr/bin/mc admin prometheus generate myminio cluster | sed '1d' | awk '{print \"  \" $0}' >> /home/prometheus.yaml;
      "

    depends_on:
      - minio

  minio-prometheus-monitoring-node:
    container_name: minio-prometheus-monitoring-node
    image: minio/mc:RELEASE.2023-09-13T23-08-58Z
    restart: ${RESTART:-unless-stopped}

    env_file:
      - ../../DATA/ai-stack/clickhouse/.env

    volumes:
      - ../../DATA/ai-stack/clickhouse/config_files/prometheus/prometheus.yaml:/home/prometheus.yaml

    entrypoint: >
      /bin/bash -c "
      /usr/bin/mc alias set myminio http://minio:9002 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD > /dev/null;
      /usr/bin/mc admin prometheus generate myminio node | sed '1d' | awk '{print \"  \" $0}' >> /home/prometheus.yaml;
      "

    depends_on:
      - minio
      - minio-prometheus-monitoring-cluster

  minio-prometheus-monitoring-bucket:
    container_name: minio-prometheus-monitoring-bucket
    image: minio/mc:RELEASE.2023-09-13T23-08-58Z
    restart: ${RESTART:-unless-stopped}

    env_file:
      - ../../DATA/ai-stack/clickhouse/.env

    volumes:
      - ../../DATA/ai-stack/clickhouse/config_files/prometheus/prometheus.yaml:/home/prometheus.yaml

    entrypoint: >
      /bin/bash -c "
      /usr/bin/mc alias set myminio http://minio:9002 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD > /dev/null;
      /usr/bin/mc admin prometheus generate myminio bucket | sed '1d' | awk '{print \"  \" $0}' >> /home/prometheus.yaml;
      "

    depends_on:
      - minio
      - minio-prometheus-monitoring-cluster
      - minio-prometheus-monitoring-node
