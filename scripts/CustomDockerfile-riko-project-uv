# ARG UBUNTU_VERSION=24.04
# ARG CUDA_VERSION=13.0
# FROM nvidia/cuda:${CUDA_VERSION}-base-ubuntu${UBUNTU_VERSION}
FROM nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04

# FROM pytorch/pytorch:2.8.0-cuda12.9-cudnn9-runtime

# An ARG declared before a FROM is outside of a build stage,
# so it canâ€™t be used in any instruction after a FROM
# ARG USER=reasearch_monster
# ARG PASSWORD=${USER}123$
# ARG PYTHON_VERSION=3.8
# To use the default value of an ARG declared before the first FROM,
# use an ARG instruction without a value inside of a build stage:
# ARG CUDA_VERSION


# Update and install dependencies
RUN apt-get update
# RUN apt-get upgrade -y
RUN apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    ca-certificates \
    python3 \
    python3-pip |
    # sudo \
    # locales \
    # openssh-server 
# libxcb-xfixes0 libxcb-shape0 pipx git wget curl ca-certificates python3 python3-venv ffmpeg git bzip2 && \

RUN apt-get install --fix-broken -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Make the "en_US.UTF-8" locale
# RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
# ENV LANG=en_US.utf8

# Setup timezone
# ENV TZ=Europe/Amsterdam
# RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copy data
COPY . /riko-project
WORKDIR /riko-project

# Install pip
# RUN curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
# RUN curl -sSL https://astral.sh/uv/install.sh -o install-uv.sh
# RUN python3 get-pip.py
# RUN bash install-uv.sh


# Install requirements
# RUN pip install --upgrade --root-user-action=ignore --no-cache-dir --break-system-packages pip
RUN pip install --upgrade --root-user-action=ignore --no-cache-dir --break-system-packages uv 
RUN pip install --upgrade --root-user-action=ignore --no-cache-dir --break-system-packages nltk

# Create .venv
# RUN python3 -m venv .venv
RUN uv venv .venv

# ENV PATH=".venv/bin:$PATH"
RUN uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128 && \
    uv pip install -r extra-req.txt --no-deps && \
    uv pip install -r requirements.txt

# RUN install_reqs.sh

# Set working directory
WORKDIR /riko-project/server

# RUN python3 main_chat.py

# # Expose port 7272 (the new default port)
# EXPOSE 7272

# The code to run when container is started:
# ENTRYPOINT ["python3", "main_chat.py"]
CMD ["python3", "main_chat.py"]
